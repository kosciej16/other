#!/bin/bash

REPOS_DIR="$HOME/repos"
APP_DIR="$HOME/bin/app"
SCRIPT_DIR="$HOME/bin/scripts"
CONFIG_DIR="$HOME/.config"
VIRT_DIR="$HOME/virt"
STEPS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DOTS_DIR=${STEPS_DIR}/dots

function i3 () {
    i3_DIR=~/.config/i3

    sudo apt install i3 i3blocks
    pip install i3ipc

    # xorg
    sudo cp i3/xorg/90-touchpad.conf /etc/X11/xorg.conf.d/

    # screenshots
    sudo apt install scrot
}


function git () {
    # .gitconfig, bin/clone_all bin/all .gitconfig-sdu
}

function logkeys () {
    mkdir -p ${REPOS_DIR}
    cd ${REPOS_DIR}
    git clone git@github.com:kernc/logkeys.git
    cd logkeys/
    ./autogen.sh 
    cd build 
    ../configure 
    make
    sudo make install

#TODO run
}


function nvim () {
    # need to install rg
    set -x

    # INSTALL NEOVIM
    mkdir -p ${APP_DIR}
    NVIM_APP=${APP_DIR}/nvim 
    if ! [ -f $NVIM_APP ]; then
        URL="https://github.com/neovim/neovim/releases/download/stable/nvim.appimage"
        curl -o ${NVIM_APP} -LO "$URL"
        chmod +x ${NVIM_APP}
        grep ${APP_DIR} ~/.profile || echo "export PATH=$PATH:${APP_DIR}" >> ~/.profile
    fi

    # ADD NVIM AS DEFAULT
    sudo update-alternatives --install /usr/bin/vim vim ${NVIM_APP} 60
    sudo update-alternatives --set vim ${NVIM_APP}
    sudo update-alternatives --install /usr/bin/editor editor ${NVIM_APP} 60
    sudo update-alternatives --set editor ${NVIM_APP}

    # COPY NEOVIM CONFIGURATION
    HOST_DIR=${CONFIG_DIR}/nvim
    LOCAL_DIR=${STEPS_DIR}/nvim
    ln ${LOCAL_DIR}/init.vim ${HOST_DIR}/init.vim
    ln ${LOCAL_DIR}/vimrc ~/.vimrc
    ln -s ${LOCAL_DIR}/vimrc_parts ${HOST_DIR}/vimrc_parts
    ln -s ${LOCAL_DIR}/colors ${HOST_DIR}/colors
    ln -s ${LOCAL_DIR}/ftplugin ${HOST_DIR}/ftplugin
    ln -s ${LOCAL_DIR}/UltiSnips ${HOST_DIR}/UltiSnips
    ln -s ${LOCAL_DIR}/vimwiki ${HOST_DIR}/vimwiki

    # SETUP PYTHON3 SUPPORT 
    mkdir -p ${VIRT_DIR}
    cd ${VIRT_DIR}
    # need to setup g:python3_host_prog to this venv in init.vim
    python3.7 -m venv neovim3
    neovim3/bin/pip install neovim

    # INSTALL PLUGINS
    $NVIM_APP +PlugInstall +qall > /dev/null

    # COC
    $NVIM_APP "+CocInstall coc-python" +qall > /dev/null
    ln ${LOCAL_DIR}/coc-settings.json ${HOST_DIR}/coc-settings.json
}


function python () {
    # LINTING AND FORMATTING
    pip install black flake8 pylint isort yapf pyls
    ln ${DOTS_DIR}/flake8 $HOME/.flake8
    ln ${DOTS_DIR}/pylintrc $HOME/.pylintrc
    mkdir -p ${CONFIG_DIR}/yapf
    ln ${DOTS_DIR}/style ${CONFIG_DIR}/yapf/style
    ln ${DOTS_DIR}/isort.cfg ${CONFIG_DIR}/.isort.cfg

    # DEBUGGING
    pip install ipdb pdbpp
    ln ${DOTS_DIR}/pdbrc.py ${HOME}/.pdbrc.py
}


function pip () {
}

function khal () {
    # .config/{khal,vdirsyncer!!!}/config .config/systemd/user/vdirsyncer.{timer,service}
    fun pipx
    pipx install git+git://github.com/pimutils/khal.git
    pipx install vdirsyncer
    pipx install vdirsyncer[google]
    systemctl --user enable vdirsyncer.timer
}


function qutebrowser () {
    mkdir -p ${REPOS_DIR}
    cd ${REPOS_DIR}
    # install from source
    git clone https://github.com/qutebrowser/qutebrowser.git
    cd qutebrowser
    python3 scripts/mkvenv.py

    LOCAL_DIR=${STEPS_DIR}/qutebrowser
    for profile in ${LOCAL_DIR}/profiles/*; do
        prof_name=$(basename ${profile})
        echo $prof_name
        mkdir -p $HOME/.qutebrowser/${prof_name}
        ln -s $profile/config $HOME/.qutebrowser/${prof_name}
    done
    ln -s ${LOCAL_DIR}/settings $HOME/.config/qutebrowser

    # qute-pass userscript uses that
    pip install tldextract

    # install PyQT5 with codec support
    pip install pyqt5.sip PyQt-builder sip
    apt install qt5-qmake qt5-default
    url="https://files.pythonhosted.org/packages/4d/81/b9a66a28fb9a7bbeb60e266f06ebc4703e7e42b99e3609bf1b58ddd232b9/PyQt5-5.14.2.tar.gz"
    wget $url
    tar -xf 
    cd into
    sudo sip-install
}

function pipx () {
    pip install pipx
}

function linux () {
    # need to install rg
    sudo apt install xclip rofi

    LOCAL_DIR=${STEPS_DIR}/linux
    ln ${LOCAL_DIR}/bashrc $HOME/.bashrc
    ln ${LOCAL_DIR}/profile $HOME/.profile
    
    # to rewrite
    cp .config/systemd/user

}


function pass () {
    LOCAL_DIR=${STEPS_DIR}/linux
    sudo apt install pass gnupg2
    ln -s ${LOCAL_DIR}/gnupg $HOME/.gnupg
    ln -s ${LOCAL_DIR}/password-store $HOME/.password-store
}


function bspwm () {
    git clone https://github.com/baskerville/bspwm.git
    git clone https://github.com/baskerville/sxhkd.git
    sudo apt-get install xcb libxcb-util0-dev libxcb-ewmh-dev libxcb-randr0-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-xinerama0-dev libasound2-dev libxcb-xtest0-dev libxcb-shape0-dev
    mkdir -p $CONFIG_DIR/.bspwm
    mkdir -p $CONFIG_DIR/.sxhkd

}

function neomutt () {
    sudo apt install isync
    # cp .mbsyncrc
    # mkdir .mail
    # cp .config/systemd/user/mbsync.service and mbsync.timer
    # systemctl --user start mbsync.timer
    # systemctl --user enable mbsync.timer
    # notmuch init

    sudo apt install msmtp
    # cp .msmtprc

    sudo apt install notmuch
    # cp .notmuch-config
    # cp .mail/.notmuch/hooks
    sudo apt install neomutt
    # cp .config/neomutt/* bez cache
    # mkdir .config/neomutt/cache
}

function mutt2task () {
    # taskopen
    apt install libjson-perl
    git clone git@github.com:ValiValpas/taskopen.git
    cd 
    make PREFIX=/usr
    sudo make PREFIX=/usr install
    wget https://raw.githubusercontent.com/artur-shaik/mutt2task/master/mutt2task.py
    #elinks
    apt install elinks
    chmod
}


function taskwarrior() {
    sudo apt-get install -y taskwarrior
    mutt2task
}

funtion random () {
    sudo apt install nfs-kernel-server
    sudo apt install ranger
}

function rclone () {
    curl https://rclone.org/install.sh | sudo bash
}


function weechat () {
    # .weechat/
    apt install weechat
}

# nvim
# python

# hub
# autojump
